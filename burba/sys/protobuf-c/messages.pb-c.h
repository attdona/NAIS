/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: messages.proto */

#ifndef PROTOBUF_C_messages_2eproto__INCLUDED
#define PROTOBUF_C_messages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Profile Profile;
typedef struct _Config Config;
typedef struct _Command Command;
typedef struct _Ack Ack;
typedef struct _Event Event;
typedef struct _Secret Secret;


/* --- enums --- */


/* --- messages --- */

struct  _Profile
{
  ProtobufCMessage base;
  char *uid;
  char *pwd;
};
#define PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&profile__descriptor) \
    , NULL, NULL }


struct  _Config
{
  ProtobufCMessage base;
  char *network;
  char *board;
  char *host;
  protobuf_c_boolean has_port;
  int32_t port;
  protobuf_c_boolean has_alive_period;
  int32_t alive_period;
  protobuf_c_boolean has_secure;
  protobuf_c_boolean secure;
};
#define CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__descriptor) \
    , NULL, NULL, NULL, 0,1883, 0,0, 0,0 }


/*
 * /////// BOCIA Command.id values //////////////////////////
 * 1 == REBOOT triggers an immediate reboot of the board
 * //////////////////////////////////////////////////////////
 */
struct  _Command
{
  ProtobufCMessage base;
  int32_t id;
  /*
   * seq links a command with a Ack
   */
  protobuf_c_boolean has_seq;
  int32_t seq;
  size_t n_svals;
  char **svals;
  size_t n_ivals;
  int32_t *ivals;
};
#define COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&command__descriptor) \
    , 0, 0,0, 0,NULL, 0,NULL }


struct  _Ack
{
  ProtobufCMessage base;
  int32_t id;
  protobuf_c_boolean has_seq;
  int32_t seq;
  protobuf_c_boolean has_status;
  int32_t status;
};
#define ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ack__descriptor) \
    , 0, 0,0, 0,0 }


struct  _Event
{
  ProtobufCMessage base;
  int32_t id;
  size_t n_svals;
  char **svals;
  size_t n_fvals;
  float *fvals;
  size_t n_ivals;
  int32_t *ivals;
};
#define EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&event__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL }


struct  _Secret
{
  ProtobufCMessage base;
  char *key;
};
#define SECRET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&secret__descriptor) \
    , NULL }


/* Profile methods */
void   profile__init
                     (Profile         *message);
size_t profile__get_packed_size
                     (const Profile   *message);
size_t profile__pack
                     (const Profile   *message,
                      uint8_t             *out);
size_t profile__pack_to_buffer
                     (const Profile   *message,
                      ProtobufCBuffer     *buffer);
Profile *
       profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   profile__free_unpacked
                     (Profile *message,
                      ProtobufCAllocator *allocator);
/* Config methods */
void   config__init
                     (Config         *message);
size_t config__get_packed_size
                     (const Config   *message);
size_t config__pack
                     (const Config   *message,
                      uint8_t             *out);
size_t config__pack_to_buffer
                     (const Config   *message,
                      ProtobufCBuffer     *buffer);
Config *
       config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__free_unpacked
                     (Config *message,
                      ProtobufCAllocator *allocator);
/* Command methods */
void   command__init
                     (Command         *message);
size_t command__get_packed_size
                     (const Command   *message);
size_t command__pack
                     (const Command   *message,
                      uint8_t             *out);
size_t command__pack_to_buffer
                     (const Command   *message,
                      ProtobufCBuffer     *buffer);
Command *
       command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   command__free_unpacked
                     (Command *message,
                      ProtobufCAllocator *allocator);
/* Ack methods */
void   ack__init
                     (Ack         *message);
size_t ack__get_packed_size
                     (const Ack   *message);
size_t ack__pack
                     (const Ack   *message,
                      uint8_t             *out);
size_t ack__pack_to_buffer
                     (const Ack   *message,
                      ProtobufCBuffer     *buffer);
Ack *
       ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ack__free_unpacked
                     (Ack *message,
                      ProtobufCAllocator *allocator);
/* Event methods */
void   event__init
                     (Event         *message);
size_t event__get_packed_size
                     (const Event   *message);
size_t event__pack
                     (const Event   *message,
                      uint8_t             *out);
size_t event__pack_to_buffer
                     (const Event   *message,
                      ProtobufCBuffer     *buffer);
Event *
       event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   event__free_unpacked
                     (Event *message,
                      ProtobufCAllocator *allocator);
/* Secret methods */
void   secret__init
                     (Secret         *message);
size_t secret__get_packed_size
                     (const Secret   *message);
size_t secret__pack
                     (const Secret   *message,
                      uint8_t             *out);
size_t secret__pack_to_buffer
                     (const Secret   *message,
                      ProtobufCBuffer     *buffer);
Secret *
       secret__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   secret__free_unpacked
                     (Secret *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Profile_Closure)
                 (const Profile *message,
                  void *closure_data);
typedef void (*Config_Closure)
                 (const Config *message,
                  void *closure_data);
typedef void (*Command_Closure)
                 (const Command *message,
                  void *closure_data);
typedef void (*Ack_Closure)
                 (const Ack *message,
                  void *closure_data);
typedef void (*Event_Closure)
                 (const Event *message,
                  void *closure_data);
typedef void (*Secret_Closure)
                 (const Secret *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor profile__descriptor;
extern const ProtobufCMessageDescriptor config__descriptor;
extern const ProtobufCMessageDescriptor command__descriptor;
extern const ProtobufCMessageDescriptor ack__descriptor;
extern const ProtobufCMessageDescriptor event__descriptor;
extern const ProtobufCMessageDescriptor secret__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_messages_2eproto__INCLUDED */
